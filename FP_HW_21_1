#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <string>
#include <cctype>

using namespace std;


void task1() {

    ifstream file1("file1.txt");
    ifstream file2("file2.txt");

    string line1, line2;
    int lineNumber = 1;
    bool filesAreEqual = true;

    if (!file1 || !file2) {
        cout << "Error opening the file\n";

    }

    while (getline(file1, line1) && getline(file2, line2)) {
        if (line1 != line2) {
            cout << "\nLine " << lineNumber << " does not match\n";
            cout << "File 1: " << line1 << "\n";
            cout << "File 2: " << line2 << "\n";
            filesAreEqual = false;
            break;
        }
        lineNumber++;
    }

    if (getline(file1, line1)) {
        cout << "File 1 has extra lines: \n";
        filesAreEqual = false;
    }
    else if (getline(file2, line2)) {
        cout << "File 2 has extra lines: \n";
        filesAreEqual = false;
    }


    file1.close();
    file2.close();

    if (filesAreEqual) {
        cout << "Files are equal\n";
    }



}
void task2() {
    int charCount = 0;
    int lineCount = 0;
    int vowelCount = 0;
    int consonantCount = 0;
    int digitCount = 0;
    char ch;

    ifstream inputFile("ceasar.txt");
    if (!inputFile) {
        cerr << "Error opening file\n";
    }


    while (inputFile.get(ch)) {
        charCount++;
        if (isalpha(ch)) {
            ch = tolower(ch);
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')
            {
                vowelCount++;
            }
            else
                consonantCount++;
        }
        else if (isdigit(ch))
            digitCount++;

        if (ch == '\n')
            lineCount++;
    }

    inputFile.close();

    ofstream outputFile("stats.txt");
    if (!outputFile) {
        cerr << "Error creating stats file\n";
    }

    outputFile << "Characters: " << charCount << "\n";
    outputFile << "Line: " << lineCount << "\n";
    outputFile << "Vowels: " << vowelCount << "\n";
    outputFile << "Consonants: " << consonantCount << "\n";
    outputFile << "Digits: " << digitCount << "\n";

    outputFile.close();

    cout << "The stats for assigned text are written successfully to the stats.txt\n";
}


string caesarCipherEncrypt(const string& input, int shift) {
    string encryptedString = input;

    for (char& ch : encryptedString) {
        if (isalpha(ch)) {
            char base = islower(ch) ? 'a' : 'A';
            ch = (ch - base + shift) % 26 + base;
        }
    }
    return encryptedString;
}

void task3() {
    ifstream inputFile("ceasar.txt");

    if (!inputFile) {
        cerr << "Error opening the file\n";
        return;
    }

    string inputText((istreambuf_iterator<char>(inputFile)), istreambuf_iterator<char>());

    inputFile.close();

    int shiftAmount;
    cout << "Enter the Caesar shift: ";
    cin >> shiftAmount;

    string encryptedText = caesarCipherEncrypt(inputText, shiftAmount);

    ofstream outputFile("output.txt");
    if (!outputFile) {
        cerr << "Error creating an encrypted file\n";
        return;
    }

    outputFile << encryptedText;

    outputFile.close();

    cout << "Encrypted text has been saved to output.txt\n";
}


int main()
{
    setlocale(LC_ALL, "Rus"); 
    
    int choice;

    while (true) {
        cout << "\n1) Task 1\n2) Task 2\n3) Task 3\n";
        cout << "Choose a task: \n";
        cin >> choice;

        switch (choice)
        {
        case 1: task1();
            break;
        case 2: task2();
            break;
        case 3: task3();
            break;
        default:
            break;
        }
    }
}
